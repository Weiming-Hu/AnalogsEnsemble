#########
# boost #
#########
# This file checks the Boost package and install the required modules if needed.
#
# The procedure looks like this
# |-- if the Boost library source codes are available to download, compile them and make the libraries [recommended];
# |-- if the codes are not found, try to find the Boost in your system [This might have a linking problem]
# *-- if neither one works, the cmake process will be terminated.
#
if (NOT BOOST_TYPE)
    set (BOOST_TYPE "BUILD" CACHE STRING
        "The type of boost library that is going to use by the make process. Should be either SYSTEM or BUILD.")
endif (NOT BOOST_TYPE)
message (STATUS "BOOST_TYPE is set to ${BOOST_TYPE}")

set (LIBRARY_DATETIME "${DEPENDENCY_PATH}/datetime")
set (LIBRARY_SYSTEM "${DEPENDENCY_PATH}/system")
set (LIBRARY_FILESYSTEM "${DEPENDENCY_PATH}/filesystem")
set (LIBRARY_PROGRAMOPTIONS "${DEPENDENCY_PATH}/program_options")
set (LIBRARY_MINIMALBOOST "${DEPENDENCY_PATH}/minimal_boost")

if (BOOST_TYPE STREQUAL "SYSTEM")
    find_package (Boost 1.41.0 REQUIRED
        COMPONENTS program_options system filesystem)
    include_directories (${Boost_INCLUDE_DIRS})
    set (Boost_USE_MULTITHREADED ON)
    message (WARNING "You are using Boost library in the system.
    Make sure you are using the same compiler to compiler AnEn code and
    Boost library to avoid linking problem.")
elseif(BOOST_TYPE STREQUAL "SYSTEM")
    message (STATUS "System Boost not found. Try to download and build it.")
    set (BOOST_TYPE "BUILD")
endif (BOOST_TYPE STREQUAL "SYSTEM")

if (BOOST_TYPE STREQUAL "BUILD")
    if (NOT (EXISTS "${LIBRARY_SYSTEM}/include" AND EXISTS "${LIBRARY_FILESYSTEM}/include" AND
        EXISTS "${LIBRARY_PROGRAMOPTIONS}/include" AND EXISTS "${LIBRARY_DATETIME}/include"))

        message (STATUS "Cann't find the source files for Boost in ${DEPENDENCY_PATH}.
        Try to download the required modules using git.")

        if (NOT EXISTS ${DEPENDENCY_PATH})
            file (MAKE_DIRECTORY ${DEPENDENCY_PATH})
        endif (NOT EXISTS ${DEPENDENCY_PATH})

        find_package(Git REQUIRED QUIET)

        if (BUILD_GRIBCONVERTER)
            if (NOT EXISTS ${LIBRARY_DATETIME})
                execute_process(COMMAND ${GIT_EXECUTABLE} "clone" "-b" "master" "--single-branch" "https://github.com/boostorg/date_time.git" ${LIBRARY_DATETIME})
                file(COPY "${IMPORTANT_PATH}/date_time_CMakeLists.txt" DESTINATION ${LIBRARY_DATETIME})
                file(RENAME "${LIBRARY_DATETIME}/date_time_CMakeLists.txt" "${LIBRARY_DATETIME}/CMakeLists.txt")
            else(NOT EXISTS ${LIBRARY_DATETIME})
                message(STATUS "date_time submodule is already downloaded")
            endif (NOT EXISTS ${LIBRARY_DATETIME})
        endif (BUILD_GRIBCONVERTER)

        if(NOT EXISTS ${LIBRARY_PROGRAMOPTIONS})
            execute_process(COMMAND ${GIT_EXECUTABLE} "clone" "-b" "master" "--single-branch" "https://github.com/boostorg/program_options.git" ${LIBRARY_PROGRAMOPTIONS})
            file(COPY "${IMPORTANT_PATH}/program_options_CMakeLists.txt" DESTINATION ${LIBRARY_PROGRAMOPTIONS})
            file(RENAME "${LIBRARY_PROGRAMOPTIONS}/program_options_CMakeLists.txt" "${LIBRARY_PROGRAMOPTIONS}/CMakeLists.txt")
        else(NOT EXISTS ${LIBRARY_PROGRAMOPTIONS})
            message(STATUS "program_options submodule is already downloaded")
        endif(NOT EXISTS ${LIBRARY_PROGRAMOPTIONS})

        if(NOT EXISTS ${LIBRARY_SYSTEM})
            execute_process(COMMAND ${GIT_EXECUTABLE} "clone" "-b" "master" "--single-branch" "https://github.com/boostorg/system.git" ${LIBRARY_SYSTEM})
            file(COPY "${IMPORTANT_PATH}/system_CMakeLists.txt" DESTINATION ${LIBRARY_SYSTEM})
            file(RENAME "${LIBRARY_SYSTEM}/system_CMakeLists.txt" "${LIBRARY_SYSTEM}/CMakeLists.txt")
        else(NOT EXISTS ${LIBRARY_SYSTEM})
            message(STATUS "system submodule is already downloaded")
        endif(NOT EXISTS ${LIBRARY_SYSTEM})

        if(NOT EXISTS ${LIBRARY_FILESYSTEM})
            execute_process(COMMAND ${GIT_EXECUTABLE} "clone" "-b" "master" "--single-branch" "https://github.com/boostorg/filesystem.git" ${LIBRARY_FILESYSTEM})
            file(COPY "${IMPORTANT_PATH}/filesystem_CMakeLists.txt" DESTINATION ${LIBRARY_FILESYSTEM})
            file(RENAME "${LIBRARY_FILESYSTEM}/filesystem_CMakeLists.txt" "${LIBRARY_FILESYSTEM}/CMakeLists.txt")
        else(NOT EXISTS ${LIBRARY_FILESYSTEM})
            message(STATUS "filesystem submodule is already downloaded")
        endif(NOT EXISTS ${LIBRARY_FILESYSTEM})

        if(NOT EXISTS ${LIBRARY_MINIMALBOOST})
            execute_process(COMMAND ${GIT_EXECUTABLE} "clone" "-b" "master" "--single-branch" "https://github.com/Weiming-Hu/boost.git" ${LIBRARY_MINIMALBOOST})
        else(NOT EXISTS ${LIBRARY_MINIMALBOOST})
            message(STATUS "minimal boost submodule is already downloaded")
        endif(NOT EXISTS ${LIBRARY_MINIMALBOOST})

    else (NOT (EXISTS "${LIBRARY_SYSTEM}/include" AND EXISTS "${LIBRARY_FILESYSTEM}/include" AND
        EXISTS "${LIBRARY_PROGRAMOPTIONS}/include" AND EXISTS "${LIBRARY_DATETIME}/include"))
        message (STATUS "Required Boost include directories found for sub modules system, filesystem, date_time, and program_options in ${DEPENDENCY_PATH}.")
    endif (NOT (EXISTS "${LIBRARY_SYSTEM}/include" AND EXISTS "${LIBRARY_FILESYSTEM}/include" AND
        EXISTS "${LIBRARY_PROGRAMOPTIONS}/include" AND EXISTS "${LIBRARY_DATETIME}/include"))

    include_directories ("${LIBRARY_SYSTEM}/include")
    include_directories ("${LIBRARY_FILESYSTEM}/include")
    include_directories ("${LIBRARY_PROGRAMOPTIONS}/include")
    add_subdirectory ("${DEPENDENCY_PATH}/system")
    add_subdirectory ("${DEPENDENCY_PATH}/filesystem")
    add_subdirectory ("${DEPENDENCY_PATH}/program_options")

    if (BUILD_GRIBCONVERTER)
        include_directories ("${LIBRARY_DATETIME}/include")
        add_subdirectory ("${DEPENDENCY_PATH}/datetime")
    endif (BUILD_GRIBCONVERTER)

    # add Boost minimal_boost
    if (EXISTS "${LIBRARY_MINIMALBOOST}/boost")
        include_directories ("${LIBRARY_MINIMALBOOST}")
    else (EXISTS "${LIBRARY_MINIMALBOOST}/boost")
        message (FATAL_ERROR "ERROR: Cannot find Boost minimal_boost library!")
    endif (EXISTS "${LIBRARY_MINIMALBOOST}/boost")

endif (BOOST_TYPE STREQUAL "BUILD")
