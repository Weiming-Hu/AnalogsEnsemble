<map id="copyable_holder_caster&lt; type, holder_type, SFINAE &gt;" name="copyable_holder_caster&lt; type, holder_type, SFINAE &gt;">
<area shape="rect" id="node4" href="$structcopyable__holder__caster.html" title="{copyable_holder_caster\l\&lt; T, std::shared_ptr\&lt; T \&gt; \&gt;\n|# holder\l|+ load()\l+ operator T *()\l+ operator T &amp;()\l+ operator std::shared\l_ptr\&lt; T \&gt; *()\l+ operator std::shared\l_ptr\&lt; T \&gt; &amp;()\l+ cast()\l# check_holder_compat()\l# load_value()\l# try_implicit_casts()\l# try_implicit_casts()\l# try_direct_conversions()\l}" alt="" coords="16,956,197,1224"/>
<area shape="rect" id="node2" href="$classtype__caster__base.html" title="Generic type caster for objects stored on the heap. " alt="" coords="15,337,199,591"/>
<area shape="rect" id="node3" href="$classtype__caster__generic.html" title="{type_caster_generic\n|+ typeinfo\l+ cpptype\l+ value\l|+ type_caster_generic()\l+ type_caster_generic()\l+ load()\l+ load_value()\l+ try_implicit_casts()\l+ try_direct_conversions()\l+ check_holder_compat()\l+ try_load_foreign_module\l_local()\l+ load_impl()\l+ cast()\l+ local_load()\l+ src_and_type()\l}" alt="" coords="19,5,194,288"/>
<area shape="rect" id="node5" href="$classtype__caster_3_01std_1_1shared__ptr_3_01_t_01_4_01_4.html" title="Specialize for the common std::shared_ptr, so users don&#39;t need to. " alt="" coords="23,1273,190,1365"/>
</map>
