<map id="Graphical Class Hierarchy" name="Graphical Class Hierarchy">
<area shape="rect" id="node2" href="$structhas__operator__delete_3_01_t_00_01void__t_3_01decltype_07static__cast_3_01void_07_5_08_07vbad95f4ce94079b9ba36252dd72d93b5.html" title="has_operator_delete\l\&lt; T, void_t\&lt; decltype\l(static_cast\&lt; void(*)\l(void *)\&gt;(T::operator delete))\&gt; \&gt;" alt="" coords="155,5,361,76"/>
<area shape="rect" id="node3" href="$structhas__operator__delete__size_3_01_t_00_01void__t_3_01decltype_07static__cast_3_01void_07_5_e659cd67a562b6670920a523a8edb40c.html" title="has_operator_delete\l_size\&lt; T, void_t\&lt; decltype\l(static_cast\&lt; void(*)(void\l *, size_t)\&gt;(T::operator delete))\&gt; \&gt;" alt="" coords="148,100,368,171"/>
<area shape="rect" id="node4" href="$structis__comparable_3_01_t_00_01enable__if__t_3_01container__traits_3_01_t_01_4_1_1is__element_81dba1096c4a7c2c4f27f8f67bb7d966.html" title="is_comparable\&lt; T, enable\l_if_t\&lt; container_traits\l\&lt; T \&gt;::is_element &amp;&amp;container\l_traits\&lt; T \&gt;::is_comparable \&gt; \&gt;" alt="" coords="155,195,361,265"/>
<area shape="rect" id="node5" href="$structis__complex_3_01std_1_1complex_3_01_t_01_4_01_4.html" title="is_complex\&lt; std::complex\l\&lt; T \&gt; \&gt;" alt="" coords="171,289,345,331"/>
<area shape="rect" id="node6" href="$structis__holder__type_3_01base_00_01std_1_1unique__ptr_3_01base_00_01deleter_01_4_01_4.html" title="is_holder_type\&lt; base,\l std::unique_ptr\&lt; base,\l deleter \&gt; \&gt;" alt="" coords="180,355,336,411"/>
<area shape="rect" id="node7" href="$structis__input__iterator_3_01_t_00_01void__t_3_01decltype_07_5std_1_1declval_3_01_t_01_6_01_4_07d75bfb9a8f56371f7d25507c315f9a0.html" title="is_input_iterator\&lt;\l T, void_t\&lt; decltype\l(*std::declval\&lt; T &amp; \&gt;\l()), decltype(++std::declval\l\&lt; T &amp; \&gt;())\&gt; \&gt;" alt="" coords="169,435,347,521"/>
<area shape="rect" id="node8" href="$structis__instantiation_3_01_class_00_01_class_3_01_us_8_8_8_01_4_01_4.html" title="is_instantiation\&lt; Class,\l Class\&lt; Us... \&gt; \&gt;" alt="" coords="179,545,337,587"/>
<area shape="rect" id="node9" href="$structis__std__array_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4.html" title="is_std_array\&lt; std::\larray\&lt; T, N \&gt; \&gt;" alt="" coords="193,611,323,652"/>
<area shape="rect" id="node10" href="$structmove__always_3_01_t_00_01enable__if__t_3_01all__of_3_01move__is__plain__type_3_01_t_01_4_04e20c83597aa6daacb65a0264a8100f3.html" title="move_always\&lt; T, enable\l_if_t\&lt; all_of\&lt; move_is\l_plain_type\&lt; T \&gt;, negation\l\&lt; is_copy_constructible\&lt; T\l \&gt; \&gt;, std::is_move_constructible\l\&lt; T \&gt;, std::is_same\&lt; decltype(std\l::declval\&lt; make_caster\&lt; T \&gt;\&gt;().operator\l T &amp;()), T &amp; \&gt;\&gt;::value \&gt; \&gt;" alt="" coords="129,676,387,805"/>
<area shape="rect" id="node11" href="$structmove__if__unreferenced_3_01_t_00_01enable__if__t_3_01all__of_3_01move__is__plain__type_3_0e0037512a8219bd3a92e5f367a13fd7c.html" title="move_if_unreferenced\l\&lt; T, enable_if_t\&lt; all\l_of\&lt; move_is_plain_type\l\&lt; T \&gt;, negation\&lt; move_always\l\&lt; T \&gt; \&gt;, std::is_move_constructible\l\&lt; T \&gt;, std::is_same\&lt; decltype(std\l::declval\&lt; make_caster\&lt; T \&gt;\&gt;().operator\l T &amp;()), T &amp; \&gt;\&gt;::value \&gt; \&gt;" alt="" coords="129,829,387,959"/>
<area shape="rect" id="node12" href="$structvector__has__data__and__format_3_01_vector_00_01enable__if__t_3_01std_1_1is__same_3_01decl747d65b4a7fb391eecda178e3ef74ddd.html" title="vector_has_data_and\l_format\&lt; Vector, enable\l_if_t\&lt; std::is_same\&lt; decltype\l(format_descriptor\&lt; typename\l Vector::value_type \&gt;::format\l(), std::declval\&lt; Vector \&gt;().data\l()), typename Vector::value_type\l * \&gt;::value \&gt; \&gt;" alt="" coords="152,983,364,1112"/>
</map>
