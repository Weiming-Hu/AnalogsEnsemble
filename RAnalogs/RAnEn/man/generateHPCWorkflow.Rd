% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generateHPCWorkflow.R
\name{generateHPCWorkflow}
\alias{generateHPCWorkflow}
\title{RAnEn::generateHPCWorkflow}
\usage{
generateHPCWorkflow(
  test.start,
  test.end,
  search.start,
  search.end,
  fcst.files,
  obs.files,
  fcst.max.flt,
  num.members,
  output.folder,
  batch.stations,
  batch.times,
  obs.id = 1,
  weights = NULL,
  verbose = 3,
  max.par.nan = 1,
  max.flt.nan = 1,
  operational = F,
  quick = T,
  max.num.sims = 2 * num.members,
  overwrite = F
)
}
\arguments{
\item{test.start}{A POSIXct for the start test time}

\item{test.end}{A POSIXct for the end test time}

\item{search.start}{A POSIXct for the start search time}

\item{search.end}{A POSIXct for the end search time}

\item{fcst.files}{The forecast file(s)}

\item{obs.files}{The observation file(s)}

\item{num.members}{The number of members in each analog}

\item{output.folder}{The output folder path. If this is
a single directory path, all analog, similarity, and configuration
files will be output to the same folder. Or this can be a
named vector containing the names \code{anen}, \code{sim}, and \code{cfg}
specifically for each file type, for example,
\code{output.folder <- c('anen' = '.', 'sim' = '.', 'cfg' = '.')}.}

\item{batch.stations}{How many stations to process in each node}

\item{batch.times}{The number of seconds included in each node.
This is used to parallel along time. For example, you have 3
test days and you want to process each day separately, you can
set \code{batch.times} to \code{24 * 60 * 60}.}

\item{obs.id}{The observation id}

\item{weights}{The weights for each forecast variable}

\item{verbose}{Verbose level. Please see
\href{https://weiming-hu.github.io/AnalogsEnsemble/CXX/class_an_en.html#a25984b953516a987e2e9eb23048e5d60}{this doc}}

\item{max.par.nan}{Maximum number of NAN in parameters.}

\item{max.flt.nan}{Maximum number of NAN in FLTs.}

\item{operational}{Whether to use the operational mode.}

\item{quick}{Whether to use quick sort algorithm.}

\item{max.num.sims}{How many similarity metrics to keep
in the file.}

\item{overwrite}{Whether to overwrite existing configuration files.}
}
\description{
RAnEn::generateHPCWorkflow can generate all configuration
files for an HPC workflow. If your Analog Ensemble
generation requires supercomputers, this is a very helpful
function to generate the configuration files for each
computational node.
}
\details{
If forecast and observations are stored in multiple
files, it is assumed that they are splitted by time.
}
\examples{
\dontrun{
test.start <- as.POSIXct('2018-08-09', tz = 'UTC')
test.end <- as.POSIXct('2018-08-19', tz = 'UTC')
search.start <- as.POSIXct('2017-01-20', tz = 'UTC')
search.end <- as.POSIXct('2017-12-15', tz = 'UTC')

fcst.files <- list.files(
  path = '/glade/u/home/wuh20/scratch/data/AnEn/forecasts',
  pattern = paste('2017|2018', collapse = ''),
  full.names = T)
obs.files <- list.files(
  path = '/glade/u/home/wuh20/scratch/data/AnEn/analysis',
  pattern = paste('2017|2018', collapse = ''),
  full.names = T)

max.flt <- 302400
output.folder <- '.'
num.members <- 20

batch.stations <- 1000
batch.times <- 24 * 3600 * 4

generateHPCWorkflow(
  test.start = test.start,
  test.end = test.end,
  search.start = search.start,
  search.end = search.end,
  fcst.files = fcst.files,
  obs.files = obs.files,
  fcst.max.flt = max.flt,
  num.members = num.members,
  output.folder = output.folder,
  batch.stations = batch.stations,
  batch.times = batch.times,
  overwrite = T)
}

}
