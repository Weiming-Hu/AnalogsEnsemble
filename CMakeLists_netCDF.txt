# This script takes care of installing the
# netCDF4 and netCDF-cxx4 process
#
# The following vairables will be set
# - NETCDF_INCLUDES
# - NETCDF_LIBRARIES
# - NETCDF_BUILT

# - NETCDF_CXX4_INCLUDE_DIR
# - NETCDF_CXX4_LIBRARIES
# - NETCDF_CXX4_BUILT
#
include(ExternalProject)
enable_language(CXX)
option(BUILD_NETCDF "build NETCDF" OFF)
set(CMAKE_EXTERNAL_PROJECT_BUILD_TYPE "Release")

if(VERBOSE)
    set(VERBOSE_DOWNLOAD 0)
    set(VERBOSE_CONFIGURE 0)
    set(VERBOSE_BUILD 0) 
    set(VERBOSE_INSTALL 0) 
    set(VERBOSE_TEST 0)
else(VERBOSE)
    set(VERBOSE_DOWNLOAD 1)
    set(VERBOSE_CONFIGURE 1)
    set(VERBOSE_BUILD 1) 
    set(VERBOSE_INSTALL 1) 
    set(VERBOSE_TEST 1)
endif(VERBOSE)

###########
# NetCDF4 #
###########
if(ENABLE_MPI)
    find_package(NetCDF COMPONENTS MPI CXX)
else(ENABLE_MPI)
    find_package(NetCDF COMPONENTS CXX)
endif(ENABLE_MPI)

if(NETCDF_FOUND)
    if(ENABLE_MPI)
        include(CheckIncludeFile)
        set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
            ${CMAKE_PREFIX_PATH} ${NETCDF_INCLUDES})
        if(VERBOSE)
            message(STATUS "CMAKE_REQUIRED_INCLUDES: ${CMAKE_REQUIRED_INCLUDES}")
        endif(VERBOSE)
        CHECK_INCLUDE_FILE("netcdf_par.h" FILE_NETCDF_PAR)
        if(FILE_NETCDF_PAR)
            message(STATUS "netcdf_par.h is found. netCDF has parallel I/O support.")
        else(FILE_NETCDF_PAR)
            message(STATUS "netcdf_par.h is not found. Build netCDF again with parallel I/O support.")
            set(NETCDF_FOUND FALSE)
        endif(FILE_NETCDF_PAR)
    endif(ENABLE_MPI)
endif(NETCDF_FOUND)

if(BUILD_NETCDF)
    set(NETCDF_FOUND FALSE)
endif(BUILD_NETCDF)

if(NOT NETCDF_FOUND)
    # if ENABLE_MPI is turned on or
    # the NetCDF can't be found
    # then build NETCDF package
    #
    message(STATUS "netCDF is not found or does not meet the requirement. Try to build it.")
    message(STATUS "Or please specify the variable CMAKE_PREFIX_PATH which contains /bin, /lib, and /include.")

    # this is required by the netcdf cmake file
    cmake_minimum_required(VERSION 3.6.1)

    find_package(CURL REQUIRED)
    find_package(ZLIB REQUIRED)
    include(CMakeLists_HDF5.txt)

    # per the official instructions, shared libraries should be disabled for MPI
    # so for the sake of uniformity, we do not build shared libraries at all
    # http://www.unidata.ucar.edu/software/netcdf/docs/getting_and_building_netcdf.html
    #
    set(NETCDF_SHARED "-DBUILD_SHARED_LIBS=ON")
    set(NETCDF_URL "https://github.com/Unidata/netcdf-c.git")
    set(NETCDF_ROOT_PATH "${DEPENDENCY_PATH}/netCDF")
    set(NETCDF_INSTALL_PREFIX "${NETCDF_ROOT_PATH}/install")
    set(NETCDF_LIB_DIR "-DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}")
    set(NETCDF_ENABLE_NETCDF4 "-DENABLE_NETCDF_4=ON")
    set(NETCDF_ENABLE_DAP "-DENABLE_DAP=ON")
    set(NETCDF_BUILD_TYPE "-DCMAKE_BUILD_TYPE=${CMAKE_EXTERNAL_PROJECT_BUILD_TYPE}")
    set(NETCDF_CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=${NETCDF_INSTALL_PREFIX}")
    set(NETCDF_CMAKE_ARGS ${NETCDF_CMAKE_ARGS} ${NETCDF_LIB_DIR}
        ${NETCDF_BUILD_TYPE} ${NETCDF_ENABLE_NETCDF4}
        ${NETCDF_SHARED} ${NETCDF_ENABLE_DAP})

    if(NOT HDF5_FOUND)
        set(NETCDF_DEPENDENCY "HDF5")
        set(NETCDF_PREFIX_PATH ${HDF5_INSTALL_PREFIX})
        set(NETCDF_HDF5_INCLUDE_DIR "-DHDF5_INCLUDE_DIR=${HDF5_INSTALL_PREFIX}/include")

	#set(NETCDF_LDFLAGS "-DLDFLAGS=${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
	set(NETCDF_CMAKE_EXE_LINKER_FLAGS "-DCMAKE_EXE_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
	set(NETCDF_CMAKE_MODULE_LINKER_FLAGS "-DCMAKE_MODULE_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
	set(NETCDF_CMAKE_SHARED_LINKER_FLAGS "-DCMAKE_SHARED_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
	set(NETCDF_CMAKE_STATIC_LINKER_FLAGS "-DCMAKE_STATIC_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")

        set(NETCDF_CMAKE_ARGS ${NETCDF_CMAKE_ARGS}
            ${NETCDF_LDFLAGS} ${NETCDF_HDF5_INCLUDE_DIR} ${NETCDF_CMAKE_EXE_LINKER_FLAGS}
	    ${NETCDF_CMAKE_MODULE_LINKER_FLAGS} ${NETCDF_CMAKE_SHARED_LINKER_FLAGS} ${NETCDF_CMAKE_STATIC_LINKER_FLAGS})
    else(NOT HDF5_FOUND)
        set(NETCDF_PREFIX_PATH ${CMAKE_PREFIX_PATH})
        set(NETCDF_DEPENDENCY "")
    endif(NOT HDF5_FOUND)
    #TODO what if there are more than one paths
    set(NETCDF_PREFIX_PATH "-DCMAKE_PREFIX_PATH=${NETCDF_PREFIX_PATH}")
    set(NETCDF_CMAKE_ARGS ${NETCDF_CMAKE_ARGS} ${NETCDF_PREFIX_PATH})

    set(NETCDF_C_COMPILER "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
    set(NETCDF_CXX_COMPILER "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")

    set(NETCDF_CMAKE_ARGS ${NETCDF_CMAKE_ARGS}
        ${NETCDF_C_COMPILER} ${NETCDF_CXX_COMPILER})

    if(ENABLE_MPI)
        set(NETCDF_ENABLE_PARALLEL "-DENABLE_PARALLEL4=ON")
        set(NETCDF_ENABLE_PARALLEL_TESTS "-DENABLE_PARALLEL_TESTS=ON")
        set(NETCDF_CMAKE_ARGS ${NETCDF_CMAKE_ARGS}
            ${NETCDF_ENABLE_PARALLEL} ${NETCDF_ENABLE_PARALLEL_TESTS})
    endif(ENABLE_MPI)
    if(VERBOSE)
        message(STATUS "NETCDF_CMAKE_ARGS: ${NETCDF_CMAKE_ARGS}")
    endif(VERBOSE)
    
    ExternalProject_add(NETCDF_PROJECT
        DEPENDS ${NETCDF_DEPENDENCY}
        PREFIX ${NETCDF_ROOT_PATH}
        GIT_REPOSITORY ${NETCDF_URL}
        GIT_TAG master
        PATCH_COMMAND ""
        UPDATE_COMMAND ""
        CMAKE_ARGS ${NETCDF_CMAKE_ARGS}
        BUILD_COMMAND ${MAKE}
        LOG_DOWNLOAD ${VERBOSE_DOWNLOAD}
        LOG_CONFIGURE ${VERBOSE_CONFIGURE}
        LOG_BUILD ${VERBOSE_BUILD}
        LOG_TEST ${VERBOSE_TEST}
        LOG_INSTALL ${VERBOSE_INSTALL})

    set(NETCDF_INCLUDES "${NETCDF_INSTALL_PREFIX}/include")
    set(NETCDF_LIBRARIES "${NETCDF_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")

    set(NETCDF_INCLUDES ${NETCDF_INCLUDES} ${HDF5_INCLUDE_DIR}
        ${CURL_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS})
    set(NETCDF_LIBRARIES ${NETCDF_LIBRARIES}
        ${HDF5_HL_LIBRARY} ${HDF5_C_LIBRARY}
        ${CURL_LIBRARIES} ${ZLIB_LIBRARIES})
    message(STATUS ${NETCDF_LIBRARIES})

    set(NETCDF_BUILT TRUE)
else(NOT NETCDF_FOUND)
    # NETCDF_INCLUDES and NETCDF_LIBRARIES
    # should have been set by the module
    #
    set(NETCDF_BUILT FALSE)
    #message(WARNING "NETCDF is found. But make sure you are using the
    #same compiler used for NETCDF to compile the CAnalogs program")
endif(NOT NETCDF_FOUND)


###############
# NetCDF-CXX4 #
###############
set(NETCDF_CXX4_URL "https://github.com/Unidata/netcdf-cxx4/archive/v4.3.0.tar.gz")
set(NETCDF_CXX4_ROOT_PATH "${DEPENDENCY_PATH}/netCDF-cxx4")
set(NETCDF_CXX4_INSTALL_PREFIX "${NETCDF_CXX4_ROOT_PATH}/install")
set(NETCDF_CXX4_BUILD_TYPE "-DCMAKE_BUILD_TYPE=${CMAKE_EXTERNAL_PROJECT_BUILD_TYPE}")
set(NETCDF_CXX4_SHARED "-DBUILD_SHARED_LIBS=ON")
set(NETCDF_CXX4_LIB_DIR "-DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}")
set(NETCDF_CXX4_CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=${NETCDF_CXX4_INSTALL_PREFIX}")
set(NETCDF_CXX4_CMAKE_ARGS ${NETCDF_CXX4_CMAKE_ARGS} ${NETCDF_CXX4_LIB_DIR} 
    ${NETCDF_CXX4_BUILD_TYPE} ${NETCDF_CXX4_SHARED})

if(NETCDF_BUILT)
    set(NETCDF_CXX4_DEPENDENCY "NETCDF_PROJECT")
    set(NETCDF_CXX4_PREFIX_PATH ${NETCDF_INSTALL_PREFIX})

    set(NETCDF_CXX4_CMAKE_EXE_LINKER_FLAGS "-DCMAKE_EXE_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
    set(NETCDF_CXX4_CMAKE_MODULE_LINKER_FLAGS "-DCMAKE_MODULE_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
    set(NETCDF_CXX4_CMAKE_SHARED_LINKER_FLAGS "-DCMAKE_SHARED_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
    set(NETCDF_CXX4_CMAKE_STATIC_LINKER_FLAGS "-DCMAKE_STATIC_LINKER_FLAGS=-L${HDF5_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
    set(NETCDF_CXX4_CMAKE_ARGS ${NETCDF_CXX4_CMAKE_ARGS}
        ${NETCDF_CXX4_CMAKE_EXE_LINKER_FLAGS} ${NETCDF_CXX4_CMAKE_MODULE_LINKER_FLAGS}
	${NETCDF_CXX4_CMAKE_SHARED_LINKER_FLAGS} ${NETCDF_CXX4_CMAKE_STATIC_LINKER_FLAGS})

else(NETCDF_BUILT)
    set(NETCDF_CXX4_PREFIX_PATH ${CMAKE_PREFIX_PATH})
    set(NETCDF_CXX4_DEPENDENCY "")
endif(NETCDF_BUILT)
set(NETCDF_CXX4_PREFIX_PATH "-DCMAKE_PREFIX_PATH=${NETCDF_CXX4_PREFIX_PATH}")
set(NETCDF_CXX4_CMAKE_ARGS ${NETCDF_CXX4_CMAKE_ARGS} ${NETCDF_CXX4_PREFIX_PATH})

set(NETCDF_CXX4_C_COMPILER "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
set(NETCDF_CXX4_CXX_COMPILER "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
set(NETCDF_CXX4_CMAKE_ARGS ${NETCDF_CXX4_CMAKE_ARGS}
    ${NETCDF_CXX4_C_COMPILER} ${NETCDF_CXX4_CXX_COMPILER})
if(VERBOSE)
    message(STATUS "NETCD_CXX4_CMAKE_ARGS: ${NETCDF_CXX4_CMAKE_ARGS}")
endif(VERBOSE)

ExternalProject_add(NETCDF_CXX4_PROJECT
    DEPENDS ${NETCDF_CXX4_DEPENDENCY}
    PREFIX ${NETCDF_CXX4_ROOT_PATH}
    URL ${NETCDF_CXX4_URL}
    PATCH_COMMAND ""
    UPDATE_COMMAND ""
    CMAKE_ARGS ${NETCDF_CXX4_CMAKE_ARGS}
    BUILD_COMMAND ${MAKE}
    LOG_TEST ${VERBOSE_TEST}
    LOG_DOWNLOAD ${VERBOSE_DOWNLOAD}
    LOG_CONFIGURE ${VERBOSE_CONFIGURE}
    LOG_BUILD ${VERBOSE_BUILD}
    LOG_INSTALL ${VERBOSE_INSTALL})

set(NETCDF_CXX4_INCLUDE_DIR "${NETCDF_CXX4_INSTALL_PREFIX}/include")
set(NETCDF_CXX4_INCLUDE_DIR ${NETCDF_CXX4_INCLUDE_DIR} ${NETCDF_INCLUDES})

# TODO: this hard coded path makes it system dependent
set(NETCDF_CXX4_LIBRARIES
    "${NETCDF_CXX4_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libnetcdf-cxx4.a")

set(NETCDF_CXX4_LIBRARIES ${NETCDF_CXX4_LIBRARIES} ${NETCDF_LIBRARIES})
set(NETCDF_CXX4_BUILT TRUE)
